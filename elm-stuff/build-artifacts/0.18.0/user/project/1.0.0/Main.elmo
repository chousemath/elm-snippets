var _user$project$Main$dividesEvenly = F2(
	function (n, t) {
		return _elm_lang$core$Native_Utils.eq(
			A2(_elm_lang$core$Basics_ops['%'], n, t),
			0);
	});
var _user$project$Main$isPrime = function (n) {
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(
			A2(
				_elm_lang$core$List$filter,
				_user$project$Main$dividesEvenly(n),
				A2(
					_elm_lang$core$List$range,
					2,
					_elm_lang$core$Basics$floor(
						_elm_lang$core$Basics$sqrt(
							_elm_lang$core$Basics$toFloat(n)))))),
		0);
};
var _user$project$Main$isPrimeDivisor = F2(
	function (n, t) {
		return _elm_lang$core$Native_Utils.eq(
			A2(_elm_lang$core$Basics_ops['%'], n, t),
			0) && _user$project$Main$isPrime(t);
	});
var _user$project$Main$searchPrime = F2(
	function (n, t) {
		searchPrime:
		while (true) {
			if (_elm_lang$core$Native_Utils.eq(
				A2(_elm_lang$core$Basics_ops['%'], n, t),
				0) && _user$project$Main$isPrime(t)) {
				var _v0 = (n / A2(_elm_lang$core$Debug$log, 'Found: ', t)) | 0,
					_v1 = t + 1;
				n = _v0;
				t = _v1;
				continue searchPrime;
			} else {
				if (_elm_lang$core$Native_Utils.eq(
					A2(_elm_lang$core$Basics_ops['%'], n, t),
					0)) {
					var _v2 = (n / t) | 0,
						_v3 = t + 1;
					n = _v2;
					t = _v3;
					continue searchPrime;
				} else {
					return A2(_user$project$Main$searchPrime, n, t) + 1;
				}
			}
		}
	});
